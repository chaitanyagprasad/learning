Using the console
	Use the console.log() to print values to the table.
	Values can be logged directly or using a variable.
	Use the console.table(<some json>) to print <some json> in tabular format on the console.
	Use console.error(string x) to print x as an error.
	Use console.warn(string x) to print x as a warning.
	Use console.time(string x) and console.timeEnd(string x) to measure the time taken by the code to execute between the time() and the timeEnd() methods.
	
Variables and declarations.
	There are 3 ways to declare variables in JS: var, let and const
	The var keyword is used to declare variable.
	If a value is not assigned to a variable when it was declared using the var keyword, then by default, the value stored in that variable is undefined.
	Variables names cannot start with a number. They can only contain letter, numbers, underscore and dollar sign.
	The let keyword works similar to the var. The difference is with scoping. The variables declared with var are scoped to the immediate function body and the variables declared with let are scoped to the immediate function block.
	The const keyword is used to declare variables whose values dont change. If we try to reassign the value of a const variable, we get error.
	If the const variable is assigned to a object, we can change the values of the properties of the object.
	
Datatypes in JS
	In JS there are 2 types of data: Primitives and Reference
		Primitives: are stored in the stack and are accessed directly by the variable
		References: are stored in the heap and are accessed by a reference.
	There are 6 primitives: String, Number, Boolean, null, Undefined, symbols.
	References: Arrays, Objects, functions, dates, anything else.
	Types are associated with values and nor variables. It means that same variable can hold values of different types.
	The typeof operator can be used to find what is the type of value of a value or a variable.
	The typeof null errenously returns null.
	
Type conversion
	Type -> String: When we want to convert a different value type to string, wrap it in the String() wrapper
	String -> Number: We can use the Number() wrapper to convert string to numbers. Additionally we can use parseInt(String x) and parseFloat(String x) methods to convert string to numbers.
	
Type Coercion
	*************** look at mozilla site for details *********************
	
Numbers and Math object	
	Use the Math.PI to get the value of pi as a constant.
	Use Math.E to get the value of euler's number as a constant.
	Use Math.round(number) will round up or down
	Use Math.ceil(number) to round up always.
	Use Math.floor(number) to round down always.
	Use Math.sqrt(number) to get square root.
	Use Math.abs(Number) to get absolute value.
	Use Math.pow(x,y) to raise x to power y
	Use Math.min(x,y......z) to get the minimum
	Use Math.max(x,y......z) to get the maximum
	Use Math.random() to get the random decimal numbers.
	
String and String methods
	Use the + to concatenate 2 strings.
	Use += to append a string to another
	Use \ to escape character
	Use length property on the string object to count the number of characters in string
	Use concat(s1, s2) on the string object to concatenate s1 and s2 to a string.
	Use toUpperCase() an toLowerCase() on the string object to convert a string to uppercase and lowercase respectively.
	Strings will be treated as character array. We can iterate strings like an array.
	Use indexOf(char) on the string object to get the first index of char in a string. -1 if char is not present.
	Use lastIndexOf(char) on the string object to get the last index of char in a string.
	Use charAt(index) on the string object to get the character present at index in a string.
	Use substring(start, end) on the string object to get the set of chars from start to end both inclusive.
	Use slice(start, end) on the string object to get the set of chars from start to end both inclusive. Additionally, clice can take a negative number, slice(-x) and give the last x character.
	Use split(delimiter) on the string object to turn the string into the array whenever the delimiter occurs in the string.
	Use replace(old,new) on the string object to replace all occurences of old in the string with new.

Arrays and Array methods.
	Enclose values in square brackets to create new array.
	Array can be created using the Array() constructor and pass the values separated by comma into the constructor.
	We can use values of various types in the array.
	use the length property on a array object to check the length of array.
	Use the Array.isArray(x) to check if x is an array.
	Use push(val) on the array object to append value to the end of the array
	Use unshift(val) on the array object to append a value in the front
	Use pop() on the array object to remove the last object from the array
	Use shift() on the array object to remove the first object from the array
	Use splice(start, end) on the array object to remove the portion of elements from the array. start and end are 0 based indices.
	Use reverse() on the array object to reverse the array.
	Use concat(array2) on the array object to concateneate array2 on the array object.
	Use sort() on the array object to sort the array. To the sort() pass a lambda function to do the comparision.

Object literals
	Any key value pairs in JS is treated as an object.
	Use the dot operator on the object literal followed by key name to get a specific property.
	We can also get the value associated with property in an object using the square bracket notation.
	The values in an object can be of any type including arrays and functions.
	If we want to use the property of an object inside the object, we use the this keyword along with the property.

Dates and times	
	Use the new Date() to create today's date. The date is a reference type of object.
	Date object can be converted to string.
	To the Date() constructor, we can pass a string representing a date and create a date object of the passed value. Ex new Date('MM-dd-YYYY')
	Use getMonth() on a date object to get the zero based month.
	Use getDay() on a date object to get a nth day starting from sunday.
	Use getFullYear() on a date object to get the year.
	Use getHours() on a date object to get the hour.
	Use getMinutes() on a date object to get minutes
	Use getTime() on a date object to get timestamp.
	We can use the corresponding set methods to achieve the reverse.
	
Functions
	Functions are blocks of code that can be defined and called at a later time or at the same time.
	Default values for the arguments can be defined while we declare the function. Ex function greet(firstName = 'chai', lastName = 'pras') will take firstName as chai and lastName as pras if no values are provided to the greet function.
	Functions can pe put into variables. This is called function expression. The function defined using function expressions can be anonymous.
	Just like declared functions, function expression can also have default argument values.
	IIFE are functions that are declared and invoked immediately. 
	IIFE can take argument. Pass the argument to function declaration and call.
	Functions can also be put inside object. Then it is called a method.
	
Window object
	Window is the global object in client side JS.
	Window is the runtime for browser for JS.
	Use prompt() on window object to collect input from the user and save the input in the variable.
	Use confirm() on window object to take a confirmation. The confirm() returns a boolean based on the user click.
	Use outerHeight and outerWidth properties on window object to get the height and width of the window with the scrollbar.
	Use innerHeight and innerWidth properties on window object to get the height and width of the window without the scrollbar.
	Use the location property on the window object to get the location of the host.
	Use the history object on the window object to navigate the history of the session.
	history.go(int x) => x<0 backword direction by that many sites.
	history.length will give total sites visited in session.
	The navigator object on the window object gives details about the browser, OS and user hardware.

Block scope with let and const
	check whats with this






Named and anonynmous Functions
	To define a function we need 3 things
		name
		parameter names
		body
	In JavaScript there are no types in function either for the arguments or the return type.
	Return statement exits the function immediately.
	If there is nothing to return, the function returns undefined.

Higher order functions
	In JS functions are values. This means that 
		we can store functions in variables.
		we can pass functions to other functions as arguments.
		we can return functions from functions.
	The map method on the array takes a function as parameter
		result = [0,1,4,9].map(Math.sqrt) // result = [0,1,2,3]

Function literals
	It is tedious to make function for small jobs. Consider
		function multiplyBy10 (x) { return x * 10 }
		result = [1,2,3,4].map(multiplyBy10)
	The remedy for the above solution is function literals.
		result = [1,2,3,4].map( function (x) { return x * 10 } ) // the function inside map is the function literals.
	In JS there is no need for named functions.	We can have a function literal and that literal can always be assigned to a variable.

Arrow functions.
	Arrow functions are a compact form of function literals.
		const average = (x,y) => (x+y)/2
	There is no need to use the function and return keywords while writing arrow functions.
	The parenthesis denote the arguments to the function and the expression to the right of the fat arrow denotes the return type of the function.
	If we have only one parameter, we can exclude the parenthesis as well.
		const square = x => x*x
	If the function is not taking any parameter, then empty parenthesis is needed.
		const dieToss = () => Math.trunc(Math.random()*6) + 1
	If the body of a function is complicated, then arrow function must
		include the multiple statements between a pair of curly braces
		compulsarily include return statement

		const indexOf = (arr,value) => {
			for(const i in arr) {
				if( arr[i] === value ) 
					return i
			}
			return undefined
		} 
	If we are returning an object literal, then the object must be enclosed in a pair of parenthesis.
		const stats = (x,y) => (
			{
				average: (x+y) / 2,
				max: Math.max(x,y)
			}
		)

Functional programming
	Functional programming is based on the concept of "What we want, not how we want"
	Functional programming makes use of higher order function to achieve the task.

Closures
	Consider
		setTimeout( () => console.log("hello") , 5000 ) // prints hello after 5 seconds of invokation.
	Let us try to make the above implimentation more flexible
		function sayLater(text, timeOut) {
			const task = () => console.log(text); // closure
			setTimeout(task,timeOut)
		}
		sayLater("hello",5000) // prints hello after 5 seconds of invoking sayLater
	In the function sayLater, text is a parameter. The text parameter stays inside sayLater function even when the sayLater function has exited.
	When a nested function references a variable, it captures that variable so that the nested function can use the variable in a later point in time. Such a nested function is called closure.
	A closure has 3 parts.
		A block of code. => const task = () => console.log(text);
		parameters => no parameters used in the task function
		"Free" variables, variables declared outside the function => text
	A closure is a nested function that has capture some free variables from the surrounding scope.
	Anything that is visible inside a scope can be used by the function from that scope. The only thing is that the function needs to have a reference to the variables it is going to consume.
	In JavaScript, the actual variable is captured. Consider.
		let text = "Goodbye"
		setTimeout( () => console.log(text), 20000 )
		text = "hello" // if this line is executed within 20 seconds of the above line, the above line will print hello instead of goodbye.
	By the above example, we can conclude that in JS, the actual variable is captured in the closure.
	
Arguments
	When we call a function with a fewer arguments than what is defined, all the missing arguments are set to undefined and the function is executed.
		function average(x,y) {
			return y === undefined ? x : (x+y) /2;
		}
	Default arguments can be used in function. In the below example, if we dont call the function with 2 arguments and call with only one, the value of y will be defaulted to the value of x
		function average(x,y = x) {
			return (x+y) /2;
		}
	Multiple default arguments is supported in JS.
		function average(x = 0,y = x) {
			return (x+y) /2;
		}
	When a function is called with more parameters than declaration, the excess is ignored.
	However, the excess parameters passed to a function can be captured in a parameter. This is called the rest parameter
		function average(...args) { // syntax of rest parameter.
			let sum = 0;
			for(let x of args) {
				sum+=x
			}
			return sum/Math.max(1,args.length);
		}
	In the above snip, we are telling to capture all the parameters supplied to average function and assign it to args array.
	To the above average function definition, if we pass an array/iterable as value to args, we will get error as args will be an array of array whose size is one.
		const numbers = [3,4,5]
		const res = average(numbers) // error
	In such a case, we need to use the spread operator to spread the elements.
		const numbers = [3,4,5]
		const res = average(...numbers)
	Consider
		const characters = [..."hello world"] // ['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd' ]

Exceptions
	In JS we use the throw statement to throw an exception.
	We can throw any value but it is customary to throw an object produced by Error function.
		function indexOf(arr,value) {
			if(!Array.isArray(arr)) throw Error(message)
			.. 
		}
	throw statement terminates the current function and its callers.
	throw statement transfers the control to the catch or finally block.
	Exception handling is done in order to signal to all the methods in the call stack about the unexpected error that has occured.
	When an exception is thrown, it must be caught and handled. General syntax is as follows
		try {
			// risky code
		}catch(e) {
			// handling code
		}
	The variable e passed to the catch block contains the exception value. It is an error object.
	Error object has name and message properties.
	The best strategy to do exception handling in JS is to rethrow.
	Rethrowing delegates the exception handling mechanism to the caller of the method.
	The finally block is used to relinquish the resources.
	The finally block is executed whether or not any exception occurs.
	We must try not to use any return, break or throw statement in the finally block.