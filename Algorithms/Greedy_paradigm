Greedy algorithm
	It is a algorithmic paradigm that follows the approach of making the locally optimal choice at each stage with the hope of finding the global optimum.
	The approach is simple, easy to implement and has a fair running complexity.
	Very few cases we get the globally optimal value.

Greedy approach works on two properties
	Greedy-choice: a global optimum can be arrived at by selecting a local optimum
	Optimal substructure: an optimal solution to the problem contains an optimal solution to the sub problems.
	Note: Greedy doesnt reconsider its solution.
	
Activity selection problem
	Problem statement: There are n given activities with their start and finish times. We are to select the maximum number of activities that can be performed by a single person, assuming that a person can work on a single activity at a time.
	
	Activity	A1	A2	A3	A4	A5	A6
	Start		0	3	1	5	5	8
	Finish		6	4	2	9	7	9
	
	Greedy solution
	1. Sort the activity according to their finish time
	
	Activity	A3	A2	A1	A5	A4	A6
	Start		1	3	0	5	5	8
	Finish		2	4	6	7	9	9
	
	2. Print the first activity from the sorted array and print its
	
	soln = A3
	
	3. If start time of next activity is greater than or equal to finish time of previous activity, print its
	
	soln = A3 A2 A5 A6
	
	Complexity: If array was sorted, O(n) solution. Else O(nlogn)
	
Job sequencing problem:
	Problem statement: 
		We have an array of jobs where each job has a deadline. 
		If the job is finished before the deadline, we get some profit. 
		Every job takes a single unit of time only to finish.
		We must maximise the total profit if we can schedule only one job at a time.
		
	Job			A  	  B	  C	  D   E	
	Deadline	2	  1	  2	  1	  3
	Profit		100	  19  27  25  15
	
	1. Sort all the jobs in the decreasing order of profit.
	
	Job			A		C		D		B		E
	Deadline	2		2		1		1		3
	Profit		100		27		25		19		15
	
	2. Initialize the result sequence as the first job in the sorted job.
	TRY TO SCHEDULE AS LATE AS POSSIBLE thays why A is scheduled in second slot
	
	soln = 0-1 empty, 1-2 A, 2-3, empty
	
	Now C has to be completed before 2 unit of time and we have one empty slot before 2 unit time.
	schedule C there
	
	soln = 0-1 C, 1-2 A, 2-3 empty
	
	3. repeat the above steps.
	
	D and B cant be scheduled as its deadline is 1 and we have maximized there
	
	Now E has deadline 3. we have one empty slot from 2-3. schedule E there
	
	soln = 0-1 C, 1-2 A, 2-3 E
	
Huffman coding
	Huffman coding is a data compressing algorithm.
	We assign variable length codes to input characters.
	The variable length depends on the frequency of characters.
	The variable length codes assigned to the input character are prefic character. There is no codeword in the system that is a prefix of any other codeword in the system.
	Ex {0,1} is a prefix code. {0,1,11} is not a prefix code because 1 is a prefix of 11.
	
	consider
	
	Character	Frequency
		a			5
		b			9
		c			12
		d			13
		e			16
		f			45
		
	1. create a leaf node for each unique character and build a min heap for all leaf nodes.
	2. select the 2 nodes with least frequency and add an internal node with sum of their freqiency
	
	Character	Frequency
		N1			14
		c			12
		d			13
		e			16
		f			45
		
	Character	Frequency
		N1			14
		N2			25
		e			16
		f			45
		
	Character	Frequency
		N3			30
		N2			25
		f			45
		
	Character	Frequency
		N4			55
		f			45
	
	Character	Frequency
		N5			100

	3. Assign 0 to the left node of the tree and assign 1 to the right node of the tree.

Minimum number of coins problem.
	Problem: Given a value v, we want to make change of Rs. v. We have infinite supply of each denomination.
	Get the minimum number of coins from the denomination
	{1,2,5,10,20,50,100,500,1000}

	Consider v = 70 
	1. Initialize the result to empty
	res = [] and balance = 70

	2. find the first element in the denomination array (x[i]) which is greater than v.
	Then balance = x[i-1]-v and res = [x[i-1]]

	3. repeat the same till balance is equal to 0